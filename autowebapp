#!/usr/bin/env python

import os
import sys
import cmd
import readline
import ConfigParser
import subprocess
import shutil

RECIPE_PATH="./recipes"

class AWAInterpreter(cmd.Cmd):
    """Entry point for command line handling."""

    prompt = "autowebapp: "
    webapp_base_path = "/Library/AutoWebApp"
    webapp_install_path = os.path.join(webapp_base_path, "installed")

    def packageExist(self, p):
        return os.path.isfile(os.path.join(RECIPE_PATH,p,"info.txt")) and os.path.isfile(os.path.join(RECIPE_PATH,p,"run"))
    
    def packageIsInstalled(self, p):
        return os.path.exists(os.path.join(self.webapp_install_path, p))

    def validPackages(self, filter=None):
        if not filter:
            validpackages = [ p for p in os.listdir(RECIPE_PATH) if self.packageExist(p) ]
        else:
            validpackages = [ p for p in os.listdir(RECIPE_PATH) if self.packageExist(p) and filter in p ]
        return validpackages
    
    def do_list(self, line):
        validpackages = self.validPackages(line)
        print '\n'.join(validpackages)

    def help_list(self):
        print '\n'.join([
        "list <keyword>",
        "Show the list of availabe webapps for installation. If you specify a keyword, it will look for all webapp identifier containing it."
        ])

    def do_infos(self, line):
        with open(os.path.join(RECIPE_PATH,line,"info.txt")) as info:
            print info.read()
            info.close()

    def complete_infos(self, text, line, begidx, endidx):
        return self.validPackages(text)

    def help_infos(self):
        print '\n'.join([
        "info [webapp]",
        "Display general infos for specified webapp."
        ])

    def do_details(self, line):
        self.do_infos(line)
        variables = ConfigParser.ConfigParser()
        variables.read(os.path.join(RECIPE_PATH,line,"variables.ini"))
        output = []
        for section in variables.sections():
            for variable in variables.options(section):
                print "{} {}".format((section + "." + variable).ljust(40),variables.get(section, variable).ljust(40))

    def help_details(self):
        print '\n'.join([
        "details [webapp]",
        "Display general infos for specified webapp plus available settings."
        ])

    def do_installed(self, line):
        print "hello"

    def help_installed(self):
        print '\n'.join([
        "installed", 
        "Show installed webapps."
        ])

    def do_install(self, line):
        if self.packageExist(line):        
            if self.packageIsInstalled(line):
                print "Application already installed"
            else:
                webapp_path=os.path.join(self.webapp_install_path, line)
                os.mkdir(webapp_path)
                subprocess.call([os.path.join(RECIPE_PATH, line, "run"), '-p', webapp_path, '-c', 'install'])
                print ""
        else:
            print "Package ID "+line+" invalid"
    
    def help_install(self):
        print '\n'.join([
        "install [webapp ...]",
        "Install specified webapps."
        ])

    def do_remove(self, line):
        if self.packageIsInstalled(line):
            webapp_path=os.path.join(self.webapp_install_path, line)
            subprocess.call([os.path.join(RECIPE_PATH, line, "run"), '-p', webapp_path, '-c', 'remove'])
            shutil.rmtree(webapp_path)
        else:
            print "Package not installed"
    
    def help_remove(self):
        print '\n'.join([
        "remove [webapp ...]",
        "Remove specified webapps, be careful, all related data will be lost."
        ])

    def do_getSettings(self, line):
        print "hello"

    def help_getSettings(self):
        print '\n'.join([
        "getSettings [webapp] <key>",
        "List webapp settings and value (only for installed one)."
        ])

    def do_setSettings(self, line):
        print "hello"

    def help_setSettings(self):
        print '\n'.join([
        "setSettings [webapp] [key] [value]",
        "Set settings for installed webapp."
        ])

    def do_EOF(self, line):
        return True

    def do_quit(self, line):
        return self.do_EOF(line)

    def do_exit(self, line):    
        return self.do_EOF(line)

    def help_EOF(self):
        print '\n'.join([
        "^D",
        "Press ctrl+D to properly exit from autowebapp shell."
        ])


if __name__ == '__main__':
    if len(sys.argv) > 1:
        AWAInterpreter().onecmd(' '.join(sys.argv[1:]))
    else:
        AWAInterpreter().cmdloop()
