#!/usr/bin/env python

import os
import sys
import argparse
import subprocess
import ConfigParser
import shutil

TARGETPATH=""
KEY=""
VALUE=""
WORKPATH=os.path.dirname(os.path.realpath(__file__))
TMP_FILE=""

def do_remove():
    for root, dirs, files in os.walk(TARGETPATH, topdown=False):
        for name in files:
            path = os.path.join(root, name)
            if os.path.islink(path):
                os.unlink(path)
            else:
                os.remove(path)
        for name in dirs:
            path = os.path.join(root, name)
            if os.path.islink(path):
                os.unlink(path)
            else:
                os.rmdir(path)

def do_install():
    src_path = os.path.join(WORKPATH,'scripts')
    folder_content = os.listdir(src_path)
    folder_content.sort()
    for script in folder_content:
        script_path = os.path.join(src_path, script)
        if os.path.isfile(script_path):
            filename, file_extension = os.path.splitext(script_path)
            if file_extension == ".sh":
                process_args = [script_path, TARGETPATH]
                returnCode = subprocess.call(process_args)
                if not returnCode == 0:
                    print "Error when running subscript "+script_path
                    sys.exit(1)


def do_set():
    config_path=TARGETPATH+"/munkiwebadmin/settings.ini"
    settings = ConfigParser.SafeConfigParser()
    settings.read(config_path)

    if KEY and VALUE:
        parts = KEY.split('.')
        partsCount = len(parts)
        if partsCount == 2:
            if not settings.has_section(parts[0]):
                settings.add_section(parts[0])
            settings.set(parts[0], parts[1], VALUE)
            print settings.get(parts[0], parts[1])
            f = open(config_path, 'w')
            settings.write(f)
            f.close()
        else:
            print "Invalid key format"
    else:
        print "You must specify a key (-k) and a value (-s) to set"

def do_get():
    config_path=TARGETPATH+"/munkiwebadmin/settings.ini"
    settings = ConfigParser.SafeConfigParser()
    settings.read(config_path)
    
    if KEY:
        parts = KEY.split('.')
        partsCount = len(parts)
        if partsCount == 1:
            for variable in settings.options(parts[0]):
                print "{} {}".format((parts[0] + "." + variable).ljust(40),settings.get(parts[0], variable).ljust(40))
        elif partsCount == 2:
            print settings.get(parts[0], parts[1])
        else:
            print "Invalid key format"
    else:
        for section in settings.sections():
            for variable in settings.options(section):
                print "{} {}".format((section + "." + variable).ljust(40),settings.get(section, variable).ljust(40))


def do_httpd24():
    if TMP_FILE:
        httpd_src = os.path.join(WORKPATH, 'files', 'httpd24.conf')
        with open(httpd_src) as f:
            httpd_conf = f.read()
        httpd_conf = httpd_conf.replace('%%INSTALLATION_ROOT%%', TARGETPATH)
        with open(TMP_FILE, 'w') as f:
            f.write(httpd_conf)
    else:
        print "A writable file path must be specified with -f option."

def do_webapp():
    if TMP_FILE:
        webapp_src = os.path.join(WORKPATH, 'files', 'webapp.plist')
        with open(webapp_src) as f:
            webapp_conf = f.read()
        webapp_conf.replace('%%INSTALLATION_ROOT%%', TARGETPATH)
        with open(TMP_FILE, 'w') as f:
            f.write(webapp_conf)
    else:
        print "A writable file path must be specified with -f option."

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Install the package.')
    parser.add_argument('-p','--path', help='Deployment path', required=True)
    parser.add_argument('-c','--command', help='Command (install, remove, set, get)', required=True)
    parser.add_argument('-k','--key', help='The key to work with (commands: get, set)', required=False)
    parser.add_argument('-s','--set', help='The value to set (command: set)', required=False)
    parser.add_argument('-f','--file', help='Temp file path used for file content exchange with autowebapp', required=False)

    args = vars(parser.parse_args())

    TARGETPATH = args['path']
    KEY = args['key']
    VALUE = args['set']
    TMP_FILE = args['file']
    
    if args['command'] == "install":
        do_install()
    elif args['command'] == "remove":
        do_remove()
    elif args['command'] == "get":
        do_get()
    elif args['command'] == "set":
        do_set()
    elif args['command'] == "httpd24":
        do_httpd24()
    elif args['command'] == "webapp":
        do_webapp()
    else:
        print "Supported commands are install, remove, get and set. Nothing else."
